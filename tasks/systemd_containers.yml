---
- name:     dump container config to file
  copy:
    dest:    "{{ role_data_dir }}/{{ item.name }}.json"
    content: "{{ item | combine ({ 'image_digest': _image_updated.results | json_query(query) | first }) | to_nice_json }}"
  loop:     "{{ containers }}"
  loop_control:
    label: "{{ item.name }}"
  register: _container_config
  vars:
    query: "[?item.item=='{{ item.image }}'].stdout"
  tags:
    - podman-deploy
    - containers
    - config

- import_tasks: ./_manage_volumes.yml
  vars:
    _containers: "{{ containers }}"
  tags:
    - podman-deploy
    - containers
    - config

- name:     set container service
  template:
    src:  "systemd.service.j2"
    dest: "/etc/systemd/system/{{ item.name }}.service"
    mode: 0664
  loop:     "{{ containers }}"
  loop_control:
    label: "{{ item.name }}"
  register: _container_services_modified
  tags:
    - podman-deploy
    - containers
    - systemd-set

- name:          stop modified container service # noqa 503
  systemd:
    name:  "{{ item.item.name }}"
    state: stopped
  when:          item.changed
  ignore_errors: yes
  loop:          "{{ _container_config.results | reverse | list + _container_services_modified.results | reverse | list }}"
  loop_control:
    label: "{{ item.item.name }}"
  tags:
    - podman-deploy
    - containers
    - systemd-stop

- name: "enable container service"
  systemd:
    daemon_reload: yes
    name:          "{{ item.name }}"
    enabled:       "{{ item.enabled | default(False) }}"
  loop: "{{ containers }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - podman-deploy
    - containers
    - systemd-enable

- name: "start container services"
  systemd:
    daemon_reload: yes
    name:          "{{ item.name }}"
    state:         '{% if item.running | default(False) %}started{% else %}stopped{% endif %}'
  loop: "{{ containers }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.running is defined
  tags:
    - podman-deploy
    - containers
    - systemd-start